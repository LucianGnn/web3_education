Stargate + обобщенный код.
В этом уроке мы научимся вызывать read функции контракта и начнём придерживаться принципа разработотки DRY
(don't repeat yourself).
Мы напишем свап через stargate одной функцией
(чтобы с помощью всего одной функции можно было бриджить токены из любой сети в любую сеть).
А также научимся искать информацию в документации.


1) Во все объекты Network добавить поле decimals и заполнить его.
Это поле будет хранить в себе decimals НАТИВНОЙ МОНЕТЫ в данной сети

2) Добавить Optimis к сетям (чтобы можно было передать Optimism и свапы шли в него и из него тоже)

3) Написать функцию поиска usdc по доступным сетям (функция должна пройтись по сетям,
которые поддерживаются софтом и вернуть сеть, в которой БОЛЬШЕ всего USDC)
сигнатура:
from eth_typing import ChecksumAddress
@staticmethod
def get_network_with_max_usdc_balance(address: ChecksumAddress) -> Network:

4) Добавить свапы USDT из BSC в Coredao

5***) Сделать класс Uniswap и прописать в нем логику покупки GETH за ETH в сети Arbitrum
Пример транзы (покупка 0.1 GETH)
Адрес GETH: 0xdD69DB25F6D620A7baD3023c5d32761D353D3De9
Подсказка: для получения правильной цены используйте UI и посмотрите Networks. А для составления параметра inputs,
сделайте несколько транз через UI и найдите отличия (с разных кошельков на разное количество токенов)

6) Сделать класс TestnetBridge и прописать в нем логику моста (мост находится в UI по ссылке справа.
Выбирайте там GETH ON ARBITRUM to GOERLIETH ON GOERLI)
Пример транзы
